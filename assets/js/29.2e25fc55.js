(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{78:function(t,n,e){"use strict";e.r(n);var a=e(0),i=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"jpush-sdk-华为通道集成指南"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jpush-sdk-华为通道集成指南"}},[t._v("#")]),t._v(" JPush SDK 华为通道集成指南")]),t._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("p",[t._v("在国内 Android 生态中，推送通道都是由终端与云端之间的长链接来维持，严重依赖于应用进程的存活状态。如今一些手机厂家会在自家 rom 中做系统级别的推送通道，再由系统分发给各个 app，以此提高在自家 rom 上的推送送达率。")]),t._v(" "),e("p",[t._v("JPush SDK 为了尽可能提高开发者在各类 rom 上的推送送达率，对使用 EMUI 的设备推送，自动切换到华为通道。同时，为了保证 SDK 的易用性，原本 JPush 的所有接口调用逻辑都不用修改,JPush 会对自身支持的功能做兼容.只需在manifest中配置上华为HMS SDK 必须的配置组件即可.")]),t._v(" "),e("h2",{attrs:{id:"功能描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能描述"}},[t._v("#")]),t._v(" 功能描述")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("JPush 初始化的时候可选择是否初始化 HMS Push 通道。")])]),t._v(" "),e("li",[e("p",[t._v("在 EMUI 设备上 JPush 通道与 华为 通道共存.")])]),t._v(" "),e("li",[e("p",[t._v("华为 通道初始化后支持 tag/alias这些 JPush 原有的功能,其它的 JPush 未支持的功能目前暂时还不可用.")])]),t._v(" "),e("li",[e("p",[t._v("增加兼容华为HMS SDK初始化失败处理错误的接口.")])])]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注")])]),t._v("：极光根据 EMUI 系统版本间差异，现采取的方案是 EMUI 4.1 及以上版本，使用 HMS 服务，通知走 HMS 通道；对于 EMUI 4.1 以下版本还是走极光通道。")]),t._v(" "),e("h2",{attrs:{id:"配置集成步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置集成步骤"}},[t._v("#")]),t._v(" 配置集成步骤")]),t._v(" "),e("p",[t._v("主要步骤为：")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"#1"}},[t._v("1. 添加 Huawei SDK 到项目中")])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"#3"}},[t._v("2. 配置接收 HMS 消息的广播接收器")])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"#5"}},[t._v("3. 在build.gradle中配置在华为后台添加的指纹证书对应的签名")])])])]),t._v(" "),e("h4",{attrs:{id:"添加-huawei-sdk-到项目中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加-huawei-sdk-到项目中"}},[t._v("#")]),t._v(" "),e("h3",{attrs:{id:"1"}},[t._v("添加 Huawei SDK 到项目中")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("拷贝third-push/huawei/libs中的插件包(jpush-android-plugin-huawei-v3.x.x.jar)到工程libs目录下")]),t._v(" "),e("ul",[e("li",[t._v("注意：也可使用jcenter集成方式，无需拷贝jpush-android-plugin-huawei-v3.x.x.jar文件，也无需配置cn.jpush.android.service.PluginHuaweiPlatformsService组件")]),t._v(" "),e("li",[t._v("示例：implementation 'cn.jiguang.sdk.plugin:huawei:3.x.x'")])])]),t._v(" "),e("li",[e("p",[t._v("在 "),e("a",{attrs:{href:"https://developer.huawei.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Huawei"),e("OutboundLink")],1),t._v(" 上创建和 JPush 上同包名的待发布应用,创建完成后下载该应用的 agconnect-services.json 配置文件并添加到应用的 module 目录下。")])]),t._v(" "),e("li",[e("p",[t._v("在根级 build.gradle 中添加规则，以纳入 HMS 服务插件 和 华为 的 Maven 代码库,可根据华为开发者联盟发布的版本更新选择最新版本：")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\n    buildscript {\n        repositories {\n            google()\n            jcenter()\n            maven {url 'http://developer.huawei.com/repo/'}\n        }\n    }\n   buildscript {\n       dependencies {\n           classpath 'com.huawei.agconnect:agcp:1.2.1.301'\n       }\n   }\n  \n\tallprojects {\n        repositories {\n            google()\n            jcenter()\n            maven {url 'http://developer.huawei.com/repo/'}\n        }\n    }\n\n")])])]),e("ul",[e("li",[t._v("在应用 module 的 build.gradle 文件底部添加 apply plugin 代码行，以启用 gradle 插件：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t// ADD THIS AT THE TOP\n   apply plugin: 'com.huawei.agconnect'\n\n")])])]),e("ul",[e("li",[t._v("在应用 module 的 gradle 中 dependencies 节点添加如下代码，可根据 华为 发布的版本更新选择最新版本:")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t dependencies {\n       implementation 'com.huawei.hms:push:4.0.2.300'\n       //引入极光-华为插件，如果采用此配置，无需拷贝jpush-android-plugin-huawei-v3.x.x.jar文件，也无需配置cn.jpush.android.service.PluginHuaweiPlatformsService组件\n       implementation 'cn.jiguang.sdk.plugin:huawei:3.x.x'\n              \n    }\n\n")])])]),e("p",[e("em",[e("strong",[t._v("注1")])]),t._v("：极光集成华为通道在 JPush Android SDK 3.0.5 添加，对应测试的华为HMS SDK 版本为：HMS-SDK-2.4.0.300.aar")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注2")])]),t._v("：JPush Android SDK 3.0.9 适配HMS SDK的升级,对应测试的华为HMS SDK 版本为:HMSSdk-base-2.5.2.300.aar,HMSSdk-push-2.5.2.300.aar")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注3")])]),t._v("：JPush Android SDK 3.1.2 适配HMS SDK的升级,对应测试的华为HMS SDK 版本为:HMSSdk-base-2.5.3.302.aar,HMSSdk-push-2.5.3.302.aar")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注4")])]),t._v("：从HMS_SDK_2.6.0.301版本开始支持jar包+res资源集成，JPush Android SDK 3.1.5对应测试的华为HMS SDK 版本为:HMS_SDK_2.6.0.301.jar")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注5")])]),t._v("：JPush Android SDK 3.2.0 更新华为HMS SDK版本为:hmssdk_2.6.3.301.jar")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注6")])]),t._v("：JPush Android SDK 3.3.6 更新华为HMS SDK版本为:hmssdk_2.6.3.306.jar")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注7")])]),t._v("：JPush Android SDK 3.5.4 更新华为HMS SDK版本为:3.0.3.301")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注7")])]),t._v("：JPush Android SDK 3.6.0 更新华为HMS SDK版本为:4.0.2.300")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注8")])]),t._v(" "),e("a",{attrs:{href:"https://developer.huawei.com/consumer/cn/doc/development/HMS-Guides/push-introduction-v3",target:"_blank",rel:"noopener noreferrer"}},[t._v("添加 华为 Push SDK 的官方文档"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"_2-配置接收-hms-消息的服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置接收-hms-消息的服务"}},[t._v("#")]),t._v(" "),e("h3",{attrs:{id:"2"}},[t._v("2. 配置接收 HMS 消息的服务")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\t <service\n                android:name="cn.jpush.android.service.PluginHuaweiPlatformsService"\n                android:exported="false">\n                <intent-filter>\n                    <action android:name="com.huawei.push.action.MESSAGING_EVENT" />\n                </intent-filter>\n            </service\n\n')])])]),e("h4",{attrs:{id:"_3-在build-gradle中配置在华为后台添加的指纹证书对应的签名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-在build-gradle中配置在华为后台添加的指纹证书对应的签名"}},[t._v("#")]),t._v(" "),e("h3",{attrs:{id:"3"}},[t._v("3. 在build.gradle中配置在华为后台添加的指纹证书对应的签名")])]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注")])]),t._v("：HMS 服务必须要求 app 签名才能注册成功。指纹证书是在终端采用keytool -list -v -keystore keystorefileName 获取偶对应的指纹证书.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    signingConfigs {\n        release {\n            storeFile file("release.keystore")//签名文件的path\n            storePassword "123456"\n            keyAlias "android.keystore"\n            keyPassword "123456"\n        }\n    }\n\n\tbuildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles \'proguard-rules.pro\'\n            signingConfig signingConfigs.release\n        }\n        debug{\n        \tminifyEnabled false\n            signingConfig signingConfigs.release\n        }\n    }\n\n')])])]),e("h2",{attrs:{id:"hms-sdk的编译混淆问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hms-sdk的编译混淆问题"}},[t._v("#")]),t._v(" HMS SDK的编译混淆问题")]),t._v(" "),e("p",[t._v("如果使用了 proguard，需要在配置文件中加入,可以防止一个误报的 warning 导致无法成功编译，")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t-ignorewarning \n    -keepattributes *Annotation* \n    -keepattributes Exceptions \n    -keepattributes InnerClasses \n    -keepattributes Signature \n    -keepattributes SourceFile,LineNumberTable \n    -keep class com.hianalytics.android.**{*;} \n    -keep class com.huawei.updatesdk.**{*;} \n    -keep class com.huawei.hms.**{*;}\n\n")])])]),e("p",[t._v("如果开发者使用了AndResGuard，需要在混淆配置文件中加入AndResGuard白名单。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    "R.string.hms*",\n    "R.string.connect_server_fail_prompt_toast",\n    "R.string.getting_message_fail_prompt_toast",\n    "R.string.no_available_network_prompt_toast",\n    "R.string.third_app_*",\n    "R.string.upsdk_*",\n    "R.layout.hms*",\n    "R.layout.upsdk_*",\n    "R.drawable.upsdk*",\n    "R.color.upsdk*",\n    "R.dimen.upsdk*",\n    "R.style.upsdk*",\n    "R.string.agc*"\n    \n')])])]),e("h2",{attrs:{id:"点击通知跳转-activity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#点击通知跳转-activity"}},[t._v("#")]),t._v(" 点击通知跳转 Activity")]),t._v(" "),e("h3",{attrs:{id:"功能说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能说明"}},[t._v("#")]),t._v(" 功能说明")]),t._v(" "),e("h4",{attrs:{id:"支持的版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持的版本"}},[t._v("#")]),t._v(" 支持的版本")]),t._v(" "),e("p",[t._v("此功能从 JPush Android SDK 3.0.9 开始支持")]),t._v(" "),e("h4",{attrs:{id:"华为手机通知跳转的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#华为手机通知跳转的定义"}},[t._v("#")]),t._v(" 华为手机通知跳转的定义")]),t._v(" "),e("p",[t._v("华为 push 允许开发者在推送通知的时候传入自定义的 intent uri 字符串，当用户点击了该通知，系统会根据 uri 的值过滤出匹配的 Activity ，并打开 Activity，达到跳转的目的。")]),t._v(" "),e("h3",{attrs:{id:"使用方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),e("h4",{attrs:{id:"push-api-推送说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push-api-推送说明"}},[t._v("#")]),t._v(" Push API 推送说明")]),t._v(" "),e("p",[t._v('在 push api 的 payload 中的 "notification" 的 "android" 节点下添加以下字段：')]),t._v(" "),e("div",{staticClass:"table-d",attrs:{align:"center"}},[e("table",{attrs:{border:"1",width:"100%"}},[e("tr",{attrs:{bgcolor:"#D3D3D3"}},[e("th",[t._v("关键字")]),t._v(" "),e("th",[t._v("类型")]),t._v(" "),e("th",[t._v("示例")]),t._v(" "),e("th",[t._v("说明")])]),t._v(" "),e("tr",[e("td",[t._v("uri_activity")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"com.example.jpushdemo.OpenClickActivity"')]),t._v(" "),e("td",[t._v("该字段用于指定开发者想要打开的 activity，值为activity 节点的 “android:name ” 属性值。")])])])]),t._v(" "),e("p",[e("em",[e("strong",[t._v("示例：")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('demo manifest配置：\n<activity android:name="com.example.jpushdemo.OpenClickActivity"\n      android:exported="true">\n      <intent-filter>\n           <action android:name="android.intent.action.VIEW"/>\n           <category android:name="android.intent.category.DEFAULT"/>\n      </intent-filter>\n</activity>\n\n请求json如下：\n{\n    "platform": [\n        "android"\n    ],\n    "audience": "all",\n    "notification": {\n        "android": {\n            "alert": "在线alert003",\n            "title": "在线title003",\n            "uri_activity": "com.example.jpushdemo.OpenClickActivity",\n        }\n    },\n    "message": {\n        "msg_content": "自定义消息内容003"\n    }\n}\n')])])]),e("p",[t._v("####SDK 端配置")]),t._v(" "),e("h5",{attrs:{id:"_1-androidmanifest-xml中配置点击通知要打开的-activity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-androidmanifest-xml中配置点击通知要打开的-activity"}},[t._v("#")]),t._v(" 1.AndroidManifest.xml中配置点击通知要打开的 activity")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<activity android:name="您配置的activity"\n      android:exported="true">\n      <intent-filter>\n           <action android:name="android.intent.action.VIEW"/>\n           <category android:name="android.intent.category.DEFAULT"/>\n      </intent-filter>\n</activity>\n')])])]),e("p",[e("em",[e("strong",[t._v("注：")])]),t._v(" android:exported 属性必须设置为 true，并增加示例中的 intent-filter，否则会导致无法收到通知。")]),t._v(" "),e("h5",{attrs:{id:"_2-获取通知相关信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取通知相关信息"}},[t._v("#")]),t._v(" 2.获取通知相关信息")]),t._v(" "),e("p",[t._v("目前启动配置的 activity 都是使用 Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK 方式启动，只需要在您配置的 activity 中的onCreate方法中进行处理，获取通知信息。")]),t._v(" "),e("p",[t._v("通过 getIntent().getData() 获取到Intent 数据。获取到的数据是 JSON 字符串，通过解析可以获得通知相关内容。")]),t._v(" "),e("p",[t._v("JSON 示例如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n\t"msg_id":"123456",\n\t"n_content":"this is content",\n\t"n_extras":{"key1":"value1","key2":"value2"},\n\t"n_title":"this is title",\n\t"rom_type":0\n}\n')])])]),e("p",[t._v("JSON 内容字段说明：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("字段")]),t._v(" "),e("th",[t._v("取值类型")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("msg_id")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("通过此key获取到通知的msgid")])]),t._v(" "),e("tr",[e("td",[t._v("n_title")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("通过此key获取到通知标题")])]),t._v(" "),e("tr",[e("td",[t._v("n_content")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("通过此key获取到通知内容")])]),t._v(" "),e("tr",[e("td",[t._v("n_extras")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("通过此key获取到通知附加字段")])]),t._v(" "),e("tr",[e("td",[t._v("rom_type")]),t._v(" "),e("td",[t._v("byte")]),t._v(" "),e("td",[t._v("通过此key获取到下发通知的平台。得到值说明：byte类型的整数， 0为极光，1为小米，2为华为，3为魅族，4为oppo，5为vivo，8为FCM。")])])])]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注：")])]),t._v(" rom_type 用于点击事件的上报，一般情况下开发者只需要取到该字段的值用于上报，不需要关心具体取值。")]),t._v(" "),e("h5",{attrs:{id:"_3-通知点击上报"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-通知点击上报"}},[t._v("#")]),t._v(" 3.通知点击上报")]),t._v(" "),e("p",[t._v("解析通知内容后，需主动调用接口来进行通知点击上报，上报接口如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n* context 上下文\n* msgId 消息ID\n* whichPushSDK 收到推送的平台，即 rom_type 字段的取值。\n**/\nJPushInterface.reportNotificationOpened(Context context, String msgId, byte whichPushSDK);\n")])])]),e("p",[e("em",[e("strong",[t._v("注：")])]),t._v(" 点击上报必须传入正确的 whichPushSDK 参数，否则会造成统计数据错误。")]),t._v(" "),e("h5",{attrs:{id:"_4-富媒体调整"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-富媒体调整"}},[t._v("#")]),t._v(" 4.富媒体调整")]),t._v(" "),e("p",[t._v('在 AndroidManifest.xml 中将 PushActivity、PopWinActivity 的 android:exported="false" 属性修改为 true，否则会导致收不到富媒体推送。')]),t._v(" "),e("h5",{attrs:{id:"_5-检测华为服务升级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-检测华为服务升级"}},[t._v("#")]),t._v(" 5.检测华为服务升级")]),t._v(" "),e("p",[t._v("如果华为设备华为服务版本过低的话，将不能使用华为推送通道发送通知，必须升级华为服务才行，用户可选检测该服务是否需要升级。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        jPluginPlatformInterface = new JPluginPlatformInterface(this);\n    }\n    protected void onStart() {\n        super.onStart();\n        jPluginPlatformInterface.onStart(this);\n    }\n    protected void onStop() {\n        super.onStop();\n        jPluginPlatformInterface.onStop(this);\n    }\n")])])]),e("p",[e("em",[e("strong",[t._v("注：")])]),t._v(" 参数必须为Activity，请在合适的Activity里调用该接口，onStart和onStop 接口都必须在Activity的生命周期里调用，否则可能引起内存泄漏。")]),t._v(" "),e("h5",{attrs:{id:"_6-activity-示例代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-activity-示例代码"}},[t._v("#")]),t._v(" 6.Activity 示例代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package com.example.jpushdemo;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.widget.TextView;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport cn.jpush.android.api.JPushInterface;\n\n/**\n * Created by jiguang on 17/7/5.\n */\n\npublic class OpenClickActivity extends Activity {\n    private static final String TAG = "OpenClickActivity";\n    /**消息Id**/\n    private static final String KEY_MSGID = "msg_id";\n    /**该通知的下发通道**/\n    private static final String KEY_WHICH_PUSH_SDK = "rom_type";\n    /**通知标题**/\n    private static final String KEY_TITLE = "n_title";\n    /**通知内容**/\n    private static final String KEY_CONTENT = "n_content";\n    /**通知附加字段**/\n    private static final String KEY_EXTRAS = "n_extras";\n    private TextView mTextView;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mTextView = new TextView(this);\n        setContentView(mTextView);\n        handleOpenClick();\n    }\n\n\n    /**\n     * 处理点击事件，当前启动配置的Activity都是使用\n     * Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK\n     * 方式启动，只需要在onCreat中调用此方法进行处理\n     */\n    private void handleOpenClick() {\n        Log.d(TAG, "用户点击打开了通知");\n        String data = null;\n        //获取华为平台附带的jpush信息\n        if (getIntent().getData() != null) {\n             data = getIntent().getData().toString();\n        }\n\n        //获取fcm、oppo、vivo、华硕、小米平台附带的jpush信息\n        if(TextUtils.isEmpty(data) && getIntent().getExtras() != null){\n            data = getIntent().getExtras().getString("JMessageExtra");\n        }\n\n        Log.w(TAG, "msg content is " + String.valueOf(data));\n        if (TextUtils.isEmpty(data)) return;\n        try {\n            JSONObject jsonObject = new JSONObject(data);\n            String msgId = jsonObject.optString(KEY_MSGID);\n            byte whichPushSDK = (byte) jsonObject.optInt(KEY_WHICH_PUSH_SDK);\n            String title = jsonObject.optString(KEY_TITLE);\n            String content = jsonObject.optString(KEY_CONTENT);\n            String extras = jsonObject.optString(KEY_EXTRAS);\n            StringBuilder sb = new StringBuilder();\n            sb.append("msgId:");\n            sb.append(String.valueOf(msgId));\n            sb.append("\\n");\n            sb.append("title:");\n            sb.append(String.valueOf(title));\n            sb.append("\\n");\n            sb.append("content:");\n            sb.append(String.valueOf(content));\n            sb.append("\\n");\n            sb.append("extras:");\n            sb.append(String.valueOf(extras));\n            sb.append("\\n");\n            sb.append("platform:");\n            sb.append(getPushSDKName(whichPushSDK));\n            mTextView.setText(sb.toString());\n\n            //上报点击事件\n            JPushInterface.reportNotificationOpened(this, msgId, whichPushSDK);\n        } catch (JSONException e) {\n            Log.w(TAG, "parse notification error");\n        }\n\n\n    }\n\n    private String getPushSDKName(byte whichPushSDK) {\n        String name;\n        switch (whichPushSDK){\n            case 0:\n                name = "jpush";\n                break;\n            case 1:\n                name = "xiaomi";\n                break;\n            case 2:\n                name = "huawei";\n                break;\n            case 3:\n                name = "meizu";\n                break;\n            case 4:\n            \tname= "oppo";\n            \tbreak;\n            case 5:\n                name = "vivo";\n                break;\n            case 6:\n                name = "asus";\n                break;                \n            case 8:\n                name = "fcm";\n                break;\n            default:\n                name = "jpush";\n        }\n        return name;\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=i.exports}}]);