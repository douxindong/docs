(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{94:function(t,n,e){"use strict";e.r(n);var a=e(0),i=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"jpush-sdk-vivo通道集成指南"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jpush-sdk-vivo通道集成指南"}},[t._v("#")]),t._v(" JPush SDK VIVO通道集成指南")]),t._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("p",[t._v("在国内 Android 生态中，推送通道都是由终端与云端之间的长链接来维持，严重依赖于应用进程的存活状态。如今一些手机厂家会在自家 rom 中做系统级别的推送通道，再由系统分发给各个 app，以此提高在自家 rom 上的推送送达率。")]),t._v(" "),e("p",[t._v("JPush SDK 为了尽可能提高开发者在各类 rom 上的推送送达率，对使用 Funtouch 的设备推送，自动切换到 VIVO 通道。同时，为了保证 SDK 的易用性，原本 JPush 的所有接口调用逻辑都不用修改，JPush 会对自身支持的功能做兼容。只需在 manifest 中配置上 VIVO SDK 必须的配置组件即可。")]),t._v(" "),e("h2",{attrs:{id:"功能描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能描述"}},[t._v("#")]),t._v(" 功能描述")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("JPush 初始化的时候可选择是否初始化 VIVO 通道。")])]),t._v(" "),e("li",[e("p",[t._v("在 Funtouch 设备上 JPush 通道与 VIVO 通道共存。")])]),t._v(" "),e("li",[e("p",[t._v("VIVO 通道初始化后支持 tag/alias这些 JPush 原有的功能，其它的 JPush 未支持的功能目前暂时还不可用。")])]),t._v(" "),e("li",[e("p",[t._v("通知效果：")]),t._v(" "),e("ul",[e("li",[t._v("VIVO 通道不支持 ACTION_NOTIFICATION_RECEIVED")])])])]),t._v(" "),e("p",[e("em",[t._v("注：")]),t._v(" JPush 通过 PushClient.getInstance(context).isSupport() 接口进行判断，对支持的机型，通知走 VIVO 通道，不支持则走极光通道。目前 VIVO 通道支持的机型X23、NEX S 、NEX A、X21i、X21、X20、Y81s、Y83A、x9sp_8.1、x9s_8.1、Z1、Y71、X20 Plus、Y85、x9_8.1、x9Plus_8.1、Y75A、Y79A、Y66i A、X9、x9s、x9P、x9sp。"),e("a",{attrs:{href:"https://dev.vivo.com.cn/documentCenter/doc/156",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细可参考"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"手动配置集成步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手动配置集成步骤"}},[t._v("#")]),t._v(" 手动配置集成步骤")]),t._v(" "),e("p",[t._v("主要步骤为：")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"#1"}},[t._v("1. 增加VIVO插件包及VIVO推送包")])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"#3"}},[t._v("2. 配置VIVO必须的组件")])])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"#4"}},[t._v("3. 将VIVO_APPKEY、VIVO_APPID 替换为在VIVO后台注册对应该应用的AppKey/AppID")])])])]),t._v(" "),e("h4",{attrs:{id:"_1-增加vivo插件包及vivo推送包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-增加vivo插件包及vivo推送包"}},[t._v("#")]),t._v(" "),e("h3",{attrs:{id:"1"}},[t._v("1. 增加VIVO插件包及VIVO推送包")])]),t._v(" "),e("ul",[e("li",[t._v("将third-push目录下找到vivo目录，从libs中拷贝其中的jar包至工程的libs目录下。")]),t._v(" "),e("li",[t._v("jar包说明：\n"),e("ul",[e("li",[t._v("jpush-android-plugin-vivo-v3.x.x.jar : JPush 插件包")]),t._v(" "),e("li",[t._v("pushsdk_v2.x.x.jar : VIVO 推送包")])])])]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注1")])]),t._v("：极光集成 VIVO 通道在 JPush Android SDK 3.2.0 添加,vivo sdk版本为：pushsdk_v2.3.1.jar\n"),e("em",[e("strong",[t._v("注2")])]),t._v("：JPush Android SDK 3.5.8 更新vivo sdk版本为：push_sdk_v2.9.0.jar。")]),t._v(" "),e("h4",{attrs:{id:"_2-配置vivo必须的组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置vivo必须的组件"}},[t._v("#")]),t._v(" "),e("h3",{attrs:{id:"3"}},[t._v("2. 配置VIVO必须的组件")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<receiver android:name="cn.jpush.android.service.PluginVivoMessageReceiver">\n        <intent-filter>\n            \x3c!-- 接收 push 消息 --\x3e\n            <action android:name="com.vivo.pushclient.action.RECEIVE" />\n        </intent-filter>\n</receiver>\n<service\n    android:name="com.vivo.push.sdk.service.CommandClientService"\n    android:exported="true" />\n<activity\n    android:name="com.vivo.push.sdk.LinkProxyClientActivity"\n    android:exported="false"\n    android:screenOrientation="portrait"\n    android:theme="@android:style/Theme.Translucent.NoTitleBar" />\n\n')])])]),e("h4",{attrs:{id:"_4-将vivo应用的-appkey-、appid-填入meta-data-标签中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-将vivo应用的-appkey-、appid-填入meta-data-标签中"}},[t._v("#")]),t._v(" "),e("h3",{attrs:{id:"4"}},[t._v("4. 将VIVO应用的 appkey 、appid 填入meta-data 标签中")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<meta-data\n            android:name="com.vivo.push.api_key"\n            android:value="您的应用对应的VIVO的APPKEY" />\n<meta-data\n    android:name="com.vivo.push.app_id"\n    android:value="您的应用对应的VIVO的APPID" />\n\n')])])]),e("h2",{attrs:{id:"使用-jcenter-自动化集成步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-jcenter-自动化集成步骤"}},[t._v("#")]),t._v(" 使用 JCenter 自动化集成步骤")]),t._v(" "),e("ul",[e("li",[t._v("确认android studio的 Project 根目录的主 gradle 中配置了jcenter支持。（新建project默认配置就支持）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\tbuildscript {\n\t\trepositories {\n\t\t\tjcenter()\n\t\t}\n            ......\n\t}\n\n\tallprojets {\n\t\trepositories {\n\t\t\tjcenter()\n\t\t}\n\t}\n\n")])])]),e("ul",[e("li",[t._v("在应用 module 的 gradle 中 dependencies 节点添加如下代码:")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    dependencies {\n        compile 'cn.jiguang.sdk.plugin:vivo:3.x.x' \n    }\n\n")])])]),e("ul",[e("li",[t._v("在应用 module 的 gradle 中 defaultConfig 节点添加如下代码:")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    manifestPlaceholders = [\n\n        // 设置manifest.xml中的变量\n        VIVO_APPKEY : "您的应用对应的VIVO的APPKEY", // VIVO平台注册的appkey\n        VIVO_APPID : "您的应用对应的VIVO的APPID", // VIVO平台注册的appid\n\n    ]\n\n\n')])])]),e("h2",{attrs:{id:"vivo-sdk的编译混淆问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vivo-sdk的编译混淆问题"}},[t._v("#")]),t._v(" VIVO SDK的编译混淆问题")]),t._v(" "),e("p",[t._v("若需要混淆 app，请在混淆文件中添加以下说明，防止 SDK 内容被二次混淆.")]),t._v(" "),e("pre",[e("code",[t._v("-dontwarn com.vivo.push.**\n-keep class com.vivo.push.**{*; }\n-keep class com.vivo.vms.**{*; }\n")])]),t._v(" "),e("h2",{attrs:{id:"点击通知跳转-activity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#点击通知跳转-activity"}},[t._v("#")]),t._v(" 点击通知跳转 Activity")]),t._v(" "),e("h3",{attrs:{id:"功能说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能说明"}},[t._v("#")]),t._v(" 功能说明")]),t._v(" "),e("h4",{attrs:{id:"支持的版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持的版本"}},[t._v("#")]),t._v(" 支持的版本")]),t._v(" "),e("p",[t._v("此功能从 JPush Android SDK 3.3.8 开始支持")]),t._v(" "),e("h4",{attrs:{id:"通知跳转的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通知跳转的定义"}},[t._v("#")]),t._v(" 通知跳转的定义")]),t._v(" "),e("p",[t._v("vivo push 允许开发者在推送通知的时候传入自定义的 intent uri 字符串，当用户点击了该通知，系统会根据 uri 的值过滤出匹配的 Activity ，并打开 Activity，达到跳转的目的。")]),t._v(" "),e("h3",{attrs:{id:"使用方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),e("h4",{attrs:{id:"push-api-推送说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push-api-推送说明"}},[t._v("#")]),t._v(" Push API 推送说明")]),t._v(" "),e("p",[t._v('在 push api 的 payload 中的 "notification" 的 "android" 节点下添加以下字段：')]),t._v(" "),e("div",{staticClass:"table-d",attrs:{align:"center"}},[e("table",{attrs:{border:"1",width:"100%"}},[e("tr",{attrs:{bgcolor:"#D3D3D3"}},[e("th",[t._v("关键字")]),t._v(" "),e("th",[t._v("类型")]),t._v(" "),e("th",[t._v("示例")]),t._v(" "),e("th",[t._v("说明")])]),t._v(" "),e("tr",[e("td",[t._v("uri_activity")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v('"com.example.jpushdemo.OpenClickActivity"')]),t._v(" "),e("td",[t._v("该字段用于指定开发者想要打开的 activity，值为activity 节点的 “android:name ” 属性值。")])])])]),t._v(" "),e("p",[e("em",[e("strong",[t._v("示例：")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('demo manifest配置：\n<activity android:name="com.example.jpushdemo.OpenClickActivity"\n      android:exported="true">\n      <intent-filter>\n           <action android:name="android.intent.action.VIEW"/>\n           <category android:name="android.intent.category.DEFAULT"/>\n      </intent-filter>\n</activity>\n\n请求json如下：\n{\n    "platform": [\n        "android"\n    ],\n    "audience": "all",\n    "notification": {\n        "android": {\n            "alert": "在线alert003",\n            "title": "在线title003",\n            "uri_activity": "com.example.jpushdemo.OpenClickActivity",\n        }\n    },\n    "message": {\n        "msg_content": "自定义消息内容003"\n    }\n}\n')])])]),e("p",[t._v("####SDK 端配置")]),t._v(" "),e("h5",{attrs:{id:"_1-androidmanifest-xml中配置点击通知要打开的-activity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-androidmanifest-xml中配置点击通知要打开的-activity"}},[t._v("#")]),t._v(" 1.AndroidManifest.xml中配置点击通知要打开的 activity")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<activity android:name="您配置的activity"\n      android:exported="true">\n      <intent-filter>\n           <action android:name="android.intent.action.VIEW"/>\n           <category android:name="android.intent.category.DEFAULT"/>\n      </intent-filter>\n</activity>\n')])])]),e("p",[e("em",[e("strong",[t._v("注：")])]),t._v(" android:exported 属性必须设置为 true，并增加示例中的 intent-filter，否则会导致无法收到通知。")]),t._v(" "),e("h5",{attrs:{id:"_2-获取通知相关信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取通知相关信息"}},[t._v("#")]),t._v(" 2.获取通知相关信息")]),t._v(" "),e("p",[t._v("目前启动配置的 activity 都是使用 Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK 方式启动，只需要在您配置的 activity 中的onCreate方法中进行处理，获取通知信息。")]),t._v(" "),e("p",[t._v('通过 getIntent().getExtras().getString("JMessageExtra"); 获取到Intent 数据。获取到的数据是 JSON 字符串，通过解析可以获得通知相关内容。')]),t._v(" "),e("p",[t._v("JSON 示例如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('{\n\t"msg_id":"123456",\n\t"n_content":"this is content",\n\t"n_extras":{"key1":"value1","key2":"value2"},\n\t"n_title":"this is title",\n\t"rom_type":0\n}\n')])])]),e("p",[t._v("JSON 内容字段说明：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("字段")]),t._v(" "),e("th",[t._v("取值类型")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("msg_id")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("通过此key获取到通知的msgid")])]),t._v(" "),e("tr",[e("td",[t._v("n_title")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("通过此key获取到通知标题")])]),t._v(" "),e("tr",[e("td",[t._v("n_content")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("通过此key获取到通知内容")])]),t._v(" "),e("tr",[e("td",[t._v("n_extras")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("通过此key获取到通知附加字段")])]),t._v(" "),e("tr",[e("td",[t._v("rom_type")]),t._v(" "),e("td",[t._v("byte")]),t._v(" "),e("td",[t._v("通过此key获取到下发通知的平台。得到值说明：byte类型的整数， 0为极光，1为小米，2为华为，3为魅族，4为oppo，5为vivo，8为FCM。")])])])]),t._v(" "),e("p",[e("em",[e("strong",[t._v("注：")])]),t._v(" rom_type 用于点击事件的上报，一般情况下开发者只需要取到该字段的值用于上报，不需要关心具体取值。")]),t._v(" "),e("h5",{attrs:{id:"_3-通知点击上报"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-通知点击上报"}},[t._v("#")]),t._v(" 3.通知点击上报")]),t._v(" "),e("p",[t._v("解析通知内容后，需主动调用接口来进行通知点击上报，上报接口如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n* context 上下文\n* msgId 消息ID\n* whichPushSDK 收到推送的平台，即 rom_type 字段的取值。\n**/\nJPushInterface.reportNotificationOpened(Context context, String msgId, byte whichPushSDK);\n")])])]),e("p",[e("em",[e("strong",[t._v("注：")])]),t._v(" 点击上报必须传入正确的 whichPushSDK 参数，否则会造成统计数据错误。")]),t._v(" "),e("h5",{attrs:{id:"_4-activity-示例代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-activity-示例代码"}},[t._v("#")]),t._v(" 4.Activity 示例代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package com.example.jpushdemo;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.widget.TextView;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport cn.jpush.android.api.JPushInterface;\n\n/**\n * Created by jiguang on 17/7/5.\n */\n\npublic class OpenClickActivity extends Activity {\n    private static final String TAG = "OpenClickActivity";\n    /**消息Id**/\n    private static final String KEY_MSGID = "msg_id";\n    /**该通知的下发通道**/\n    private static final String KEY_WHICH_PUSH_SDK = "rom_type";\n    /**通知标题**/\n    private static final String KEY_TITLE = "n_title";\n    /**通知内容**/\n    private static final String KEY_CONTENT = "n_content";\n    /**通知附加字段**/\n    private static final String KEY_EXTRAS = "n_extras";\n    private TextView mTextView;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mTextView = new TextView(this);\n        setContentView(mTextView);\n        handleOpenClick();\n    }\n\n\n    /**\n     * 处理点击事件，当前启动配置的Activity都是使用\n     * Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK\n     * 方式启动，只需要在onCreat中调用此方法进行处理\n     */\n    private void handleOpenClick() {\n        Log.d(TAG, "用户点击打开了通知");\n        String data = null;\n        //获取华为平台附带的jpush信息\n        if (getIntent().getData() != null) {\n             data = getIntent().getData().toString();\n        }\n\n        //获取fcm、oppo、vivo、华硕、小米平台附带的jpush信息\n        if(TextUtils.isEmpty(data) && getIntent().getExtras() != null){\n            data = getIntent().getExtras().getString("JMessageExtra");\n        }\n\n        Log.w(TAG, "msg content is " + String.valueOf(data));\n        if (TextUtils.isEmpty(data)) return;\n        try {\n            JSONObject jsonObject = new JSONObject(data);\n            String msgId = jsonObject.optString(KEY_MSGID);\n            byte whichPushSDK = (byte) jsonObject.optInt(KEY_WHICH_PUSH_SDK);\n            String title = jsonObject.optString(KEY_TITLE);\n            String content = jsonObject.optString(KEY_CONTENT);\n            String extras = jsonObject.optString(KEY_EXTRAS);\n            StringBuilder sb = new StringBuilder();\n            sb.append("msgId:");\n            sb.append(String.valueOf(msgId));\n            sb.append("\\n");\n            sb.append("title:");\n            sb.append(String.valueOf(title));\n            sb.append("\\n");\n            sb.append("content:");\n            sb.append(String.valueOf(content));\n            sb.append("\\n");\n            sb.append("extras:");\n            sb.append(String.valueOf(extras));\n            sb.append("\\n");\n            sb.append("platform:");\n            sb.append(getPushSDKName(whichPushSDK));\n            mTextView.setText(sb.toString());\n\n            //上报点击事件\n            JPushInterface.reportNotificationOpened(this, msgId, whichPushSDK);\n        } catch (JSONException e) {\n            Log.w(TAG, "parse notification error");\n        }\n\n\n    }\n\n    private String getPushSDKName(byte whichPushSDK) {\n        String name;\n        switch (whichPushSDK){\n            case 0:\n                name = "jpush";\n                break;\n            case 1:\n                name = "xiaomi";\n                break;\n            case 2:\n                name = "huawei";\n                break;\n            case 3:\n                name = "meizu";\n                break;\n            case 4:\n            \tname= "oppo";\n            \tbreak;\n            case 5:\n                name = "vivo";\n                break;\n            case 6:\n                name = "asus";\n                break;                   \n            case 8:\n                name = "fcm";\n                break;\n            default:\n                name = "jpush";\n        }\n        return name;\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=i.exports}}]);